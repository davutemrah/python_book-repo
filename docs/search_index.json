[["index.html", "Python Scratch Book Chapter 1 Acknowledgement", " Python Scratch Book DEA 2022-07-09 Chapter 1 Acknowledgement This is a personal notebook open for public use. I have collected these notes, codes and best practices that I find useful to remind myself on python programming language. All these content are free to use and share. "],["intro.html", "Chapter 2 Introduction 2.1 Types of objects in Python 2.2 Expressions: Mathematical Operations 2.3 String Operations 2.4 Data Types", " Chapter 2 Introduction Jupyter Lab to install on mac: pip3 install jupyterlab on terminal to upgrade pip: pip3 install --upgrade pip on terminal check python version !python -V Python Python is what is called an interpreted language. Compiled languages examine your entire program at compile time, and are able to warn you about a whole class of errors prior to execution. In contrast, Python interprets your script line by line as it executes it. Python will stop executing the entire program when it encounters an error (unless the error is expected and handled by the programmer, a more advanced subject that we’ll cover later on in this course). # Check the Python Version import sys print(sys.version) ## 3.10.3 (v3.10.3:a342a49189, Mar 16 2022, 09:34:18) [Clang 13.0.0 (clang-1300.0.29.30)] [Tip:] sys is a built-in module that contains many system-specific parameters and functions, including the Python version in use. Before using it, we must explicitly import it. 2.1 Types of objects in Python Python is an object-oriented language. There are many different types of objects in Python. Let’s start with the most common object types: strings, integers and floats. Anytime you write words (text) in Python, you’re using character strings (strings for short). The most common numbers, on the other hand, are integers (e.g. -1, 0, 100) and floats, which represent real numbers (e.g. 3.14, -42.0). Object Types integer = 10 float = 10.1 string = “Hello” boolean = True float to integer a = 10.123 type(a) ## &lt;class &#39;float&#39;&gt; b = int(a) b ## 10 type(b) ## &lt;class &#39;int&#39;&gt; numeric to string a_string = str(a) a_string ## &#39;10.123&#39; string to numeric float(&quot;1.1&quot;) ## 1.1 it does not transform directly to integer here int(&quot;1.123&quot;) but it works when transforming to float then integer. int(float(&quot;10.123&quot;)) boolean bl = True bl ## True type(bl) ## &lt;class &#39;bool&#39;&gt; boolean to numeric True becomes 1 int(bl) ## 1 numeric to boolean 0 becomes False all other numbers are True bool(-100) ## True bool(0) ## False 2.2 Expressions: Mathematical Operations 5 + 5 * 10 - 2 / 5 ## 54.6 integer division 11 // 2 ## 5 modulo: remainder 10 % 3 ## 1 2.3 String Operations -string object are in single quote or double quote 2.3.1 Indices Positive Index In python indices start with 0 In R indices start with 1 Negative Index -1 corresponds to the last element myname = &quot;Davut Emrah Ayan&quot; print(&quot;Object myname:&quot;, myname) # examples ## Object myname: Davut Emrah Ayan print(myname[0], &#39;is the first element of myname object&#39;) ## D is the first element of myname object print(myname[6], &#39;is the 6th element of myname object&#39;) ## E is the 6th element of myname object print(myname[-1], &#39;is the last element of myname object&#39;) ## n is the last element of myname object 2.3.2 Slicing Full version syntax: string_object[from : to : increment] print(&quot;Object:&quot;, myname) ## Object: Davut Emrah Ayan print(&quot;From 0 index to 5th index, by 1, is&quot;, myname[0:5:1]) ## From 0 index to 5th index, by 1, is Davut Short version print(&quot;Object myname:&quot;, myname) ## Object myname: Davut Emrah Ayan print(myname[0:5], &quot;is the first 5 element of the object&quot;) ## Davut is the first 5 element of the object Shorter version Numeric string is easier to see. num = &quot;0123456789&quot; print(num[::2], &quot;every 2 other element&quot;) ## 02468 every 2 other element print(num[::3], &quot;every 3 other element&quot;) ## 0369 every 3 other element print(num[::4], &quot;every 4 other element&quot;) ## 048 every 4 other element print(num[::5], &quot;every 5 other element&quot;) ## 05 every 5 other element Length of an object : len() it is character length or element length len(myname) ## 16 2.3.3 Concatenate statement = &quot;KU&quot; + &quot; is the best!&quot; statement ## &#39;KU is the best!&#39; myname[0:5] + &quot; is the best!&quot; ## &#39;Davut is the best!&#39; Multiplication with strings myname[0:6] * 3 ## &#39;Davut Davut Davut &#39; 2.3.4 Escape \\n : new line \\t : tab space Backward slash ’' is used to escape characters # new line print(&quot;Life \\nIs \\nGood!&quot;) ## Life ## Is ## Good! # tab space print(&quot;Life\\tIs\\tGood!&quot;) ## Life Is Good! raw string print( r&quot;Life is good!&quot; ) ## Life is good! 2.3.5 Immutable string objects are immutable, so you can change its any part by indexing any_string = &quot;Life is good!&quot; any_string[5:7] = &quot;was&quot; # TypeError: &#39;str&#39; object does not support item assignment 2.3.6 loop thru strings my_txt = &quot;life is good!&quot; for i in my_txt: print(i) ## l ## i ## f ## e ## ## i ## s ## ## g ## o ## o ## d ## ! my_txt = &quot;life is good!&quot; for i in range(len(my_txt)): print(i) ## 0 ## 1 ## 2 ## 3 ## 4 ## 5 ## 6 ## 7 ## 8 ## 9 ## 10 ## 11 ## 12 2.3.7 in/not in check if a phrase is present in a string my_txt = &quot;life is good!&quot; print(&quot;good&quot; in my_txt) ## True if &quot;good&quot; in my_txt: print(my_txt) ## life is good! if &quot;bad&quot; not in my_txt: print(&quot;&#39;bad&#39; is not in the text&quot;) ## &#39;bad&#39; is not in the text 2.3.8 Useful Methods used with strings uppercase/lowercase upper() : strings to uppercase lower() capitalize() &quot;Ohh! my life!&quot;.upper() ## &#39;OHH! MY LIFE!&#39; &quot;OHH! MY LIFE!&quot;.lower() ## &#39;ohh! my life!&#39; &quot;star&quot;.capitalize() ## &#39;Star&#39; &quot;is it lowercase&quot;.islower() ## True &quot;IS IT UPPERCASE&quot;.isupper() ## True replace method replace(): to replace part of a string syntax: string.replace(oldvalue, newvalue, count) #example query = &#39;&#39;&#39; select all_columns from my_table&#39;&#39;&#39; new_query = query.replace(&quot;my_table&quot;, &quot;new_table_name&quot;) print(new_query) ## ## select all_columns ## from new_table_name strip method strip() method removes leading or trailing white-space raw_text = &quot; my text &quot; raw_text.strip() ## &#39;my text&#39; split method split() method breaks a string by specified character. split() method returns list type. raw_text = &quot;banana, apple, cherry&quot; alist = raw_text.split(&quot;,&quot;) alist ## [&#39;banana&#39;, &#39; apple&#39;, &#39; cherry&#39;] there are some whitespce in the splitted elements in the list alist[1].strip() ## &#39;apple&#39; 2.4 Data Types In Python, there are different data types: string, integer, and float. Different data types can be contained in a tuple. 2.4.1 1. tuples a_tuple = (1, 2.5, &quot;string&quot;, [3, 4]) a_tuple ## (1, 2.5, &#39;string&#39;, [3, 4]) concatenate tuples b_tuple = (&quot;a&quot;, &quot;ab&quot;) a_tuple + b_tuple ## (1, 2.5, &#39;string&#39;, [3, 4], &#39;a&#39;, &#39;ab&#39;) slicing a_tuple[:2] ## (1, 2.5) length len(a_tuple) ## 4 immutable element of a tuple can not be changed a_tuple = (1,2,3,4,5) a_tuple[5] = &quot;a&quot; # TypeError: &#39;tuple&#39; object does not support item assignment sorted function sorted() function: We can sort the tuple and assign a new name sorted() function returns list type. a_tuple = (1, 5, 2, 7, 4) type(sorted(a_tuple)) ## &lt;class &#39;list&#39;&gt; Nesting 2.4.2 2. lists "],["pandas-library.html", "Chapter 3 Pandas Library 3.1 read data 3.2 Explore Data", " Chapter 3 Pandas Library run pip3 install pandas on rstudio terminal or mac terminal or jupyter notebook 3.1 read data import pandas as pd pd.set_option(&#39;display.max_columns&#39;, None) 3.1.1 csv file IBM sample data: I could not run with “https” because I did not have a certificate installed. So, I go on with “http” and it worked. data_link = &quot;http://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DS0103EN/labs/data/recipes.csv&quot; recipes = pd.read_csv(data_link) 3.2 Explore Data #recipes.head() 3.2.1 Get the dimensions of the dataframe. #recipes.shape "],["random.html", "Chapter 4 RANDOM", " Chapter 4 RANDOM i = int(input(&quot;sayi gir = &quot;)) for x in range(i+1) : y = x*5 print(x,&quot;x&quot;,5,&quot;=&quot;,y) "],["applications.html", "Chapter 5 Applications 5.1 Example one 5.2 Example two", " Chapter 5 Applications Some significant applications are demonstrated in this chapter. 5.1 Example one 5.2 Example two "],["final-words.html", "Chapter 6 Final Words", " Chapter 6 Final Words We have finished a nice book. "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
