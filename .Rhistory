## empty data frame
empty_df = pd.DataFrame()
for i in "empty":
empty_df["new_column"] = empty_df["new_column"].append(i)
import pandas as pd
pd.set_option('display.max_columns', None)
import pandas as pd
pd.set_option('display.max_columns', None)
## empty data frame
empty_df = pd.DataFrame()
for i in "empty":
empty_df["new_column"] = empty_df["new_column"].append(i)
View(empty_df)
empty_df
empty_df
empty_df.columns
## empty data frame
df1 = pd.DataFrame()
df2 = pd.DataFrame({'A' : []}
df2
## empty data frame
df1 = pd.DataFrame()
df2 = pd.DataFrame({'A' : []}
df2
## empty data frame
df1 = pd.DataFrame()
df2 = pd.DataFrame({'A' : []}
df2
## empty data frame
df1 = pd.DataFrame()
df2 = pd.DataFrame({'A' : []})
df2
## empty data frame
df1 = pd.DataFrame()
## empty data frame
df1 = pd.DataFrame()
df1
df2 = pd.DataFrame({'A' : []})
df2
df2.empty
df2.columns
df3 = pd.DataFrame({'var1': [1,2,3,4],
'var2': ['a', 'b', 'c', 'd'],
'var3': pd.Series([2, 3], index=[2, 3])})
df3
df3 = pd.DataFrame({'var1': [1,2,3,4],
'var2': ['a', 'b', 'c', 'd'],
'var3': pd.Series([2, 3], index=[2, 3])})
df3
df3 = pd.DataFrame({'var1': [1,2,3,4],
'var2': ['a', 'b', 'c', 'd'],
'var3': pd.Series([2, 3], index=[2, 3])})
df3
df3 = pd.DataFrame({'var1': [1,2,3,4]})
,
'var2': ['a', 'b', 'c', 'd'],
'var3': pd.Series([2, 3], index=[2, 3])})
df3
df3 = pd.DataFrame({'var1': [1,2,3,4], 'var2': ['a', 'b', 'c', 'd'], 'var3': pd.Series([2, 3], index=[2, 3])})
df3
df3 = pd.DataFrame({'var1': [1,2,3,4], 'var2': ['a', 'b', 'c', 'd'], 'var3': pd.Series([2, 3], index=[2, 3])})
df3
df3 = pd.DataFrame({'var1': [1,2,3,4], 'var2': ['a', 'b', 'c', 'd'])
df3
df3 = pd.DataFrame({'var1': [1,2,3,4], 'var2': ['a', 'b', 'c', 'd']})
df3
df3 = pd.DataFrame({'var1': [1,2,3,4], 'var2': ['a', 'b', 'c', 'd']})
df3
df3.columns
# iterating the columns
for i in df3.columns:
print(i)
# iterating the columns
for i in df3.columns:
print(i)
# list(data) or
my_columns = list(df3.columns)
my_columns
# list(data) or
my_columns = list(df3.columns)
my_columns
# iterating the columns
for i in df3.columns:
print(i)
# iterating the columns
for i in df3.columns:
print(i)
# list(data) or
my_columns = list(df3.columns)
my_columns
# list(data) or
my_columns = list(df3.columns)
my_columns
# list(data) or
my_columns = list(df3.columns)
my_columns
# iterating the columns
for i in df3.columns:
print(i)
# iterating the columns
for i in df3.columns:
print(i)
# list(data) or
my_columns = list(df3.columns)
my_columns
# list(data) or
my_columns = list(df3.columns)
my_columns
df3.columns
my_cols = df3.columns
my_cols
my_cols = df3.columns
my_cols
print(df3.keys())
df3.keys()
list(data.columns.values)
list(df3.columns.values)
list(df3.columns.values.tolist())
sorted(df3)
df3.rename(columns = {'var1':'new_col1'}, inplace = True)
df3.rename(columns = {'var1':'new_col1'}, inplace = True)
### list column names
list(df3)
df3.columns = ['new_col1', 'new_col2']
list(df3)
df = pd.DataFrame({'A?la': [1,2,3,4],
'PYTHON': ['a', 'a', 'a', 'a']})
df = pd.DataFrame({'A?la': [1,2,3,4],
'PYTHON': ['a', 'a', 'a', 'a']})
df
df = pd.DataFrame({'A?la': [1,2,3,4],
'PYTHON': ['a', 'a', 'a', 'a'],
'col 3': ['1','1','b','b']})
df
df.rename(columns = {'PYTHON':'Python'}, inplace = True)
### list column names
list(df)
new_names = ['new_name1', 'new_name2','new_name3']
df.columns = new_names
list(df)
### set problematic names
problem_names = ['VAR1$$$', 'var2','Var3###']
df.columns = problem_names
### removing bad characters
df.columns = df.columns.str.replace('$', '')
df.columns = df.columns.str.replace('#', '')
list(df)
### set problematic names
problem_names = ['VAR1$$$', 'var2','Var3###']
df.columns = problem_names
### removing bad characters
df.columns = df.columns.str.replace('$', '',regex=True)
df.columns = df.columns.str.replace('#', '')
list(df)
### set problematic names
problem_names = ['VAR1$$$', 'var2','Var3###']
df.columns = problem_names
### removing bad characters
df.columns = df.columns.str.replace('$', '')
df.columns = df.columns.str.replace('#', '')
list(df)
### set problematic names
problem_names = ['VAR1$$$', 'var2','Var3###']
df.columns = problem_names
### removing bad characters
df.columns = df.columns.str.replace('$', '')
df.columns = df.columns.str.replace('#', '')
list(df)
### set problematic names
problem_names = ['VAR1$$$', 'var2','Var3###']
df.columns = problem_names
### removing bad characters
df.columns = df.columns.str.replace('$', '', regex = True)
df.columns = df.columns.str.replace('#', '', regex = True)
list(df)
### set problematic names
problem_names = ['VAR  $1', 'var #2','Var ? 3 ']
df.columns = problem_names
## Column names: remove white spaces and convert to lower case
df.columns= df.columns.str.strip().str.lower()
## removing bad characters
df.columns = df.columns.str.replace('$', '', regex = True)
df.columns = df.columns.str.replace('#', '', regex = True)
df.columns = df.columns.str.replace('?', '', regex = True)
list(df)
### set problematic names
problem_names = ['VAR  $1', 'var #2','Var ? 3 ']
df.columns = problem_names
## Column names: remove white spaces and convert to lower case
df.columns= df.columns.str.strip().str.lower()
## removing bad characters
df.columns = df.columns.str.replace('$', '', regex = True)
df.columns = df.columns.str.replace('#', '', regex = True)
df.columns = df.columns.str.replace('?', '', regex = True)
df.columns = df.columns.str.replace('\ws', '_', regex = True)
list(df)
### set problematic names
problem_names = ['VAR  $1', 'var #2','Var ? 3 ']
df.columns = problem_names
## Column names: remove white spaces and convert to lower case
df.columns= df.columns.str.strip().str.lower()
## removing bad characters
df.columns = df.columns.str.replace('$', '', regex = True)
df.columns = df.columns.str.replace('#', '', regex = True)
df.columns = df.columns.str.replace('?', '', regex = True)
df.columns = df.columns.str.replace(' ', '', regex = True)
list(df)
### set problematic names
problem_names = ['VAR  $1', 'var #2','Var ? 3 ']
df.columns = problem_names
## Column names: remove white spaces and convert to lower case
df.columns= df.columns.str.strip()
## Column names: convert to lower case
df.columns = df.columns.str.lower()
## Column names: convert to lower case
df = df.rename(columns = str.lower)
## Column names: convert to upper case
df.columns = df.columns.str.upper()
## removing bad characters
df.columns = df.columns.str.replace('$', '', regex = True)
df.columns = df.columns.str.replace('#', '', regex = True)
df.columns = df.columns.str.replace('?', '', regex = True)
df.columns = df.columns.str.replace(' ', '', regex = True)
list(df)
## Column names: convert to upper case
df.columns = df.columns.str.upper()
list(df)
### set problematic names
problem_names = ['VAR  $1', 'var #2','Var ? 3 ']
df.columns = problem_names
## Column names: remove white spaces and convert to lower case
df.columns= df.columns.str.strip()
## Column names: convert to lower case
df.columns = df.columns.str.lower()
## Column names: convert to lower case
df = df.rename(columns = str.lower)
## removing bad characters
df.columns = df.columns.str.replace('$', '', regex = True)
df.columns = df.columns.str.replace('#', '', regex = True)
df.columns = df.columns.str.replace('?', '', regex = True)
df.columns = df.columns.str.replace(' ', '', regex = True)
list(df)
## Column names: convert to upper case
df.columns = df.columns.str.upper()
list(df)
