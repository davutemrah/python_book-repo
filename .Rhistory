condition3 = df['salary'] > 80000
df['label'] = np.where(condition1, 'Low', 'High')
df['label'] = np.where(condition2, 'Medium', df['label'])
df.head()
condition1 = df['salary'] <= 50000
condition2 = (df['salary'] > 50000) and (df['salary'] <= 80000)
condition3 = df['salary'] > 80000
df['label'] = np.where(condition1, 'Low', 'High')
df['label'] = np.where(condition2, 'Medium', df['label'])
df.head()
condition1 = df['salary'] <= 50000
condition2 = (df['salary'] > 50000) & (df['salary'] <= 80000)
df['label'] = np.where(condition1, 'Low', 'High')
df['label'] = np.where(condition2, 'Medium', df['label'])
df.head()
# Define thresholds for 'low', 'medium', and 'high' earners
bins = [0, 60000, 80000, float('inf')]
labels = ['Low', 'Medium', 'High']
# Use pd.cut to create a new column 'category'
df['category'] = pd.cut(df['salary'], bins=bins, labels=labels)
# Define thresholds for 'low', 'medium', and 'high' earners
bins = [0, 60000, 80000, float('inf')]
labels = ['Low', 'Medium', 'High']
# Use pd.cut to create a new column 'category'
df['category'] = pd.cut(df['salary'], bins=bins, labels=labels)
df
import pandas as pd
import numpy as np
data = {
'department': ['Sales', 'Sales', 'HR', 'HR', 'IT', 'IT', 'Finance', 'Finance'],
'employee': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace', 'Hannah'],
'salary': [70000, 80000, 50000, 60000, 90000, 85000, 95000, 65000],
}
df = pd.DataFrame(data)
df
df[df['employee'] == 'Eve']
df[df['department'].isin(['HR', 'IT'])]
df[df['salary'] > 80000]
df[(df['salary'] > 70000) & (df['salary'] < 90000)]
df.groupby('department').filter(lambda x: x['salary'].sum() > 150000)
df.loc[0:3, :]
df.iloc[0:3, :]
cols = ['employee', 'salary']
df[cols]
df.loc[0:3, ['employee', 'salary']]
df.iloc[0:3, :]
df.groupby('department')['salary'].mean()
merged_df = pd.merge(df1, df2, on='key')
# Sample DataFrame
data = {
'employee': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace', 'Hannah'],
'salary': [70000, 80000, 50000, 60000, 90000, 85000, 75000, 65000]
}
df = pd.DataFrame(data)
df.head()
# CONDITION
# this condition creates a series of boolean
condition = df['salary'] > 85000
df['label'] = np.where(condition, 'high', 'low')
df.head()
condition = df['employee'] == 'David'
df['employee'] = np.where(condition, 'Davut', df['employee'])
df.head()
condition1 = df['salary'] <= 60000
condition2 = (df['salary'] > 60000) & (df['salary'] <= 80000)
df['label'] = np.where(condition1, 'Low', 'High')
df['label'] = np.where(condition2, 'Medium', df['label'])
df.head()
# Define thresholds for 'low', 'medium', and 'high' earners
bins = [0, 60000, 80000, float('inf')]
labels = ['Low', 'Medium', 'High']
# Use pd.cut to create a new column 'category'
df['category'] = pd.cut(df['salary'], bins=bins, labels=labels)
df
# Define thresholds for 'low', 'medium', and 'high' earners
bins = [0, 60000, 80000, float('inf')]
labels = ['Low', 'Medium', 'High']
# Use pd.cut to create a new column 'category'
df['category'] = pd.cut(df['salary'], bins=bins, labels=labels)
df.head()
import pandas as pd
data = {
'NAME': ['David', 'Alice', 'Charlie',  'Bob',],
'AGE': [25, 30,  40, 35],
'SALARY': [50000, 600000, 55000, 700000]
}
df = pd.DataFrame(data)
df
# Sort by 'age' in ascending order (DEFAULT)
sorted_df = df.sort_values(by='NAME')
print(sorted_df)
# Sort by 'age' in ascending order, then by 'salary' in descending order
sorted_df = df.sort_values(by=['AGE', 'SALARY'], ascending=[True, False])
print(sorted_df)
data = {
'NAME': ['Alice', 'Bob', 'Charlie', 'David'],
'AGE': [25, 30, None, 40]
}
df = pd.DataFrame(data)
# Sort by 'age' and place NaN values at the start
sorted_df = df.sort_values(by='AGE', na_position='first')
print(sorted_df)
import pandas as pd
data = {
'department': ['Sales', 'Sales', 'HR', 'HR', 'IT', 'IT', 'Finance', 'Finance'],
'employee': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace', 'Hannah'],
'salary': [70000, 80000, 50000, 60000, 90000, 85000, 75000, 65000],
'bonus': [5000, 7000, 4000, 6000, 9000, 8500, 7500, 6500]
}
df_company = pd.DataFrame(data)
df_company
# Group by 'department' and calculate the mean salary
grouped_df = df_company.groupby('department')['salary'].mean()
print(grouped_df)
print(type(grouped_df))
# Convert the resulting Series into a DataFrame
grouped_df = grouped_df.reset_index()
# Rename the column for clarity
grouped_df.columns = ['department', 'average_salary']
grouped_df
# Group by 'department' and 'employee', and calculate total compensation
df_company['total_compensation'] = df_company['salary'] + df_company['bonus']
grouped_df = df_company.groupby(['department', 'employee'])['total_compensation'].sum()
print(grouped_df)
print(type(grouped_df))
# Group by 'department' and calculate sum and mean of 'salary' and 'bonus'
agg_df = df_company.groupby('department').agg({ 'salary': ['sum', 'mean'],
'bonus': ['sum', 'mean']
})
print(agg_df)
print(type(agg_df))
agg_df = df_company.groupby('department').agg(
total_salary = pd.NamedAgg(column='salary', aggfunc='sum'),
avg_salary = pd.NamedAgg(column='salary', aggfunc='mean'),
total_bonus = pd.NamedAgg(column='bonus', aggfunc='sum'),
avg_bonus = pd.NamedAgg(column='bonus', aggfunc='mean')
)
print(agg_df)
agg_df = df_company.groupby('department').agg({
'salary': 'sum', 'bonus': 'sum'
}).rename(columns={
'salary': 'total_salary',
'bonus': 'total_bonus'
})
agg_df['avg_salary'] = df_company.groupby('department')['salary'].mean()
agg_df['avg_bonus'] = df_company.groupby('department')['bonus'].mean()
print(agg_df)
data = {
'department': ['Sales', 'Sales', 'HR', 'HR', 'IT', 'IT', 'Finance', 'Finance'],
'employee': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace', 'Hannah'],
'salary': [70000, 80000, 50000, 60000, 90000, 85000, 95000, 65000],
}
df = pd.DataFrame(data)
# Group by 'department' and calculate sum of 'salary' with transform
df['total_salary'] = df.groupby('department')['salary'].transform('sum')
print(df)
# Group by 'department' and calculate sum of 'salary' with transform
df2 = df.copy()
df2['demeaned_salary'] = df2.groupby('department')['salary'].transform(lambda x: (x - x.mean()))
print(df2)
# Group by 'department' and filter departments with total salary > 150,000
filtered_df = df.groupby('department').filter(lambda x: x['salary'].sum() > 150000)
print(filtered_df)
df2['total_salary'] = df.groupby('department')['salary'].transform('sum')
df2 = df2[df2['total_salary'] > 150000]
df2
# Define conditions for categorizing salaries
conditions = [
(df['salary'] <= 60000),
(df['salary'] > 60000) & (df['salary'] <= 80000),
(df['salary'] > 80000)
]
# Corresponding choices for each condition
choices = ['Low', 'Medium', 'High']
# Use np.select to create a new column 'earnings_category'
df['earnings_category'] = np.select(conditions, choices)
df.head()
import pandas as pd
import numpy as np
data = {
'department': ['Sales', 'Sales', 'HR', 'HR', 'IT', 'IT', 'Finance', 'Finance'],
'employee': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace', 'Hannah'],
'salary': [70000, 80000, 50000, 60000, 90000, 85000, 95000, 65000],
}
df = pd.DataFrame(data)
df
df[df['employee'] == 'Eve']
df[df['department'].isin(['HR', 'IT'])]
df[df['salary'] > 80000]
df[(df['salary'] > 70000) & (df['salary'] < 90000)]
df.groupby('department').filter(lambda x: x['salary'].sum() > 150000)
df.loc[0:3, :]
df.iloc[0:3, :]
cols = ['employee', 'salary']
df[cols]
df.loc[0:3, ['employee', 'salary']]
df.iloc[0:3, :]
df.groupby('department')['salary'].mean()
merged_df = pd.merge(df1, df2, on='key')
# Sample DataFrame
data = {
'employee': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace', 'Hannah'],
'salary': [70000, 80000, 50000, 60000, 90000, 85000, 75000, 65000]
}
df = pd.DataFrame(data)
df.head()
# CONDITION
# this condition creates a series of boolean
condition = df['salary'] > 85000
df['label'] = np.where(condition, 'high', 'low')
df.head()
condition = df['employee'] == 'David'
df['employee'] = np.where(condition, 'Davut', df['employee'])
df.head()
condition1 = df['salary'] <= 60000
condition2 = (df['salary'] > 60000) & (df['salary'] <= 80000)
df['label'] = np.where(condition1, 'Low', 'High')
df['label'] = np.where(condition2, 'Medium', df['label'])
df.head()
# Define thresholds for 'low', 'medium', and 'high' earners
bins = [0, 60000, 80000, float('inf')]
labels = ['Low', 'Medium', 'High']
# Use pd.cut to create a new column 'category'
df['category'] = pd.cut(df['salary'], bins=bins, labels=labels)
df.head()
# Define conditions for categorizing salaries
conditions = [
(df['salary'] <= 60000),
(df['salary'] > 60000) & (df['salary'] <= 80000),
(df['salary'] > 80000)
]
# Corresponding choices for each condition
choices = ['Low', 'Medium', 'High']
# Use np.select to create a new column 'earnings_category'
df['category'] = np.select(conditions, choices)
df.head()
import pandas as pd
import numpy as np
data = {
'department': ['Sales', 'Sales', 'HR', 'HR', 'IT', 'IT', 'Finance', 'Finance'],
'employee': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace', 'Hannah'],
'salary': [70000, 80000, 50000, 60000, 90000, 85000, 95000, 65000],
}
df = pd.DataFrame(data)
df
df[df['employee'] == 'Eve']
df[df['department'].isin(['HR', 'IT'])]
df[df['salary'] > 80000]
df[(df['salary'] > 70000) & (df['salary'] < 90000)]
df.groupby('department').filter(lambda x: x['salary'].sum() > 150000)
df.loc[0:3, :]
df.iloc[0:3, :]
cols = ['employee', 'salary']
df[cols]
df.loc[0:3, ['employee', 'salary']]
df.iloc[0:3, :]
df.groupby('department')['salary'].mean()
merged_df = pd.merge(df1, df2, on='key')
# Sample DataFrame
data = {
'employee': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace', 'Hannah'],
'salary': [70000, 80000, 50000, 60000, 90000, 85000, 75000, 65000]
}
df = pd.DataFrame(data)
df.head()
# CONDITION
# this condition creates a series of boolean
condition = df['salary'] > 85000
df['label'] = np.where(condition, 'high', 'low')
df.head()
condition = df['employee'] == 'David'
df['employee'] = np.where(condition, 'Davut', df['employee'])
df.head()
condition1 = df['salary'] <= 60000
condition2 = (df['salary'] > 60000) & (df['salary'] <= 80000)
df['label'] = np.where(condition1, 'Low', 'High')
df['label'] = np.where(condition2, 'Medium', df['label'])
df.head()
# Define thresholds for 'low', 'medium', and 'high' earners
bins = [0, 60000, 80000, float('inf')]
labels = ['Low', 'Medium', 'High']
# Use pd.cut to create a new column 'category'
df['category'] = pd.cut(df['salary'], bins=bins, labels=labels)
df.head()
# Define conditions for categorizing salaries
conditions = [
(df['salary'] <= 60000),
(df['salary'] > 60000) & (df['salary'] <= 80000),
(df['salary'] > 80000)
]
# Corresponding choices for each condition
choices = ['Low', 'Medium', 'High']
# Use np.select to create a new column 'earnings_category'
df['category2'] = np.select(conditions, choices)
df.head()
# Custom function to categorize salary
def categorize_salary(salary):
if salary <= 60000:
return 'Low'
elif 60000 < salary <= 80000:
return 'Medium'
else:
return 'High'
# Apply the custom function to create a new column 'earnings_category'
df['category3'] = df['salary'].apply(categorize_salary)
df.head()
my_string = "hello"
print(my_string)  # Output: hello
# Trying to modify a string will create a new one
my_string = my_string + " world"
my_string
my_string = "hello"
# Trying to modify a string will create a new one
my_string = my_string + " world"
my_string
list_1 = [1, 2, 3]
list_1.append(1)
print(list_1)
list_1 = [1, 2, 3]
list_1.append(100)
print(list_1)
list_1 = [1, 2, 3]
list_1.append(10)   # do not assign to a variable
list_1.extend(100)   # do not assign to a variable
print(list_1)
list_1 = [1, 2, 3]
list_1.append(10)   # do not assign to a variable
list_1.extend( [100] )   # requires a list
print(list_1)
list_1 = [1, 2, 3]
list_1.append(10)   # do not assign to a variable
list_1.extend( [100] )   # requires a list
list_1.add( [100] )   # requires a list
print(list_1)
list_1 = [1, 2, 3]
list_1.append(10)   # do not assign to a variable
list_1.extend( [100] )   # requires a list
list_1.add( 100 )   # requires a list
print(list_1)
list_1 = [1, 2, 3]
list_1.append(10)   # do not assign to a variable
print(list_1)
list_2 = [1, 2, 3]
list_2.extend( [10, 100, 1000] )   # requires a list
print(list_2)
list_3 = {1, 2, 3}
list_3.add( 100 )   # requires a list
print(list_3)
set_3 = {1, 2, 3}
set_3.add( 100 )   # requires a list
print(set_3)
my_list = [1, 2, 3, 2, 4]
# Removes the first occurrence of 2
my_list.remove(2)
print(my_list)  # Output: [1, 3, 2, 4]
my_list = [1, 2, 3, 4]
# Removes and returns the last element by default
last_element = my_list.pop()
print(last_element)  # Output: 4
print(my_list)  # Output: [1, 2, 3]
# Removes and returns the element at index 1
second_element = my_list.pop(1)
print(second_element)  # Output: 2
print(my_list)  # Output: [1, 3]
my_set = {1, 2, 3}
# Discards the element 2
my_set.discard(2)
print(my_set)  # Output: {1, 3}
my_list = [1, 2, 3]
# Clears all elements from the list
my_list.clear()
print(my_list)  # Output: []
a = ["a", "b", "c"]
for item in a:
print(item.upper())
## 1. way
a_tuple = (1, 2.5, "string", [3, 4])
b = (1,)
print(b)
a = ("a", "b", "c", "d", "a", "b", "c", "b")
a.count("b")
a = ("a", "b", "c", "d", "a", "b", "c", "d")
for item in a:
print(item)
a = ("a", "b", "a", "b")
for item in a:
print(item)
import pandas as pd
import numpy as np
data = {
'department': ['Sales', 'Sales', 'HR', 'HR', 'IT', 'IT', 'Finance', 'Finance'],
'employee': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace', 'Hannah'],
'salary': [70000, 80000, 50000, 60000, 90000, 85000, 95000, 65000],
}
df = pd.DataFrame(data)
df
df[df['employee'] == 'Eve']
df[df['department'].isin(['HR', 'IT'])]
df[df['salary'] > 80000]
df[(df['salary'] > 70000) & (df['salary'] < 90000)]
df.groupby('department').filter(lambda x: x['salary'].sum() > 150000)
df.loc[0:3, :]
df.iloc[0:3, :]
cols = ['employee', 'salary']
df[cols]
df.loc[0:3, ['employee', 'salary']]
df.iloc[0:3, :]
df.groupby('department')['salary'].mean()
data = {
'employee': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace', 'Hannah'],
'salary': [70000, 80000, 50000, 60000, 90000, 85000, 75000, 65000]
}
df = pd.DataFrame(data)
df.head()
# this condition creates a series of boolean
condition = df['salary'] > 85000
df['label'] = np.where(condition, 'high', 'low')
df.head()
condition = df['employee'] == 'David'
df['employee'] = np.where(condition, 'Davut', df['employee'])
df.head()
condition1 = df['salary'] <= 60000
condition2 = (df['salary'] > 60000) & (df['salary'] <= 80000)
df['label'] = np.where(condition1, 'Low', 'High')
df['label'] = np.where(condition2, 'Medium', df['label'])
df.head()
# Use np.where for multiple conditions
df['label2'] = np.where(df['salary'] <= 60000, 'Low',
np.where(df['salary'] <= 80000, 'Medium', 'High'))
print(df)
# Use np.where for multiple conditions
condition_1 = df['salary'] <= 60000
condition_2 = df['salary'] <= 80000
df['label2'] = np.where(condition_1, 'Low',
np.where(condition_2, 'Medium', 'High') )
print(df)
df['label'] = df['value'].apply(lambda x: 'high' if x > 85000 else 'low')
df['label5'] = df['salary'].apply(lambda x: 'high' if x > 85000 else 'low')
df = df.assign(label6=np.where(df['salary'] > 85000, 'high', 'low'))
df
df = df.assign(label6=np.where(df['salary'] > 85000, 'high', 'low'))
df.head()
import pandas as pd
import numpy as np
data = {
'department': ['Sales', 'Sales', 'HR', 'HR', 'IT', 'IT', 'Finance', 'Finance'],
'employee': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace', 'Hannah'],
'salary': [70000, 80000, 50000, 60000, 90000, 85000, 95000, 65000],
}
df = pd.DataFrame(data)
df
df[df['employee'] == 'Eve']
df[df['department'].isin(['HR', 'IT'])]
df[df['salary'] > 80000]
df[(df['salary'] > 70000) & (df['salary'] < 90000)]
df.groupby('department').filter(lambda x: x['salary'].sum() > 150000)
df.loc[0:3, :]
df.iloc[0:3, :]
cols = ['employee', 'salary']
df[cols]
df.loc[0:3, ['employee', 'salary']]
df.iloc[0:3, :]
df.groupby('department')['salary'].mean()
data = {
'employee': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace', 'Hannah'],
'salary': [70000, 80000, 50000, 60000, 90000, 85000, 75000, 65000]
}
df = pd.DataFrame(data)
df.head()
# this condition creates a series of boolean
condition = df['salary'] > 85000
df['label'] = np.where(condition, 'high', 'low')
df.head()
condition = df['employee'] == 'David'
df['employee'] = np.where(condition, 'Davut', df['employee'])
df.head()
condition1 = df['salary'] <= 60000
condition2 = (df['salary'] > 60000) & (df['salary'] <= 80000)
df['label'] = np.where(condition1, 'Low', 'High')
df['label'] = np.where(condition2, 'Medium', df['label'])
df.head()
# Use np.where for multiple conditions
condition_1 = df['salary'] <= 60000
condition_2 = df['salary'] <= 80000
df['label2'] = np.where(condition_1, 'Low',
np.where(condition_2, 'Medium', 'High') )
print(df)
# Define thresholds for 'low', 'medium', and 'high' earners
bins = [0, 60000, 80000, float('inf')]
labels = ['Low', 'Medium', 'High']
# Use pd.cut to create a new column 'category'
df['category'] = pd.cut(df['salary'], bins=bins, labels=labels)
df.head()
df['high_low'] = df['salary'].apply(lambda x: 'high' if x > 85000 else 'low')
df = df.assign(high_low2 = np.where(df['salary'] > 85000, 'high', 'low'))
df.head()
data = {
'employee': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace', 'Hannah'],
'salary': [70000, 80000, 50000, 60000, 90000, 85000, 75000, 65000]
}
df = pd.DataFrame(data)
# Define conditions for categorizing salaries
conditions = [
(df['salary'] <= 60000),
(df['salary'] > 60000) & (df['salary'] <= 80000),
(df['salary'] > 80000)
]
# Corresponding choices for each condition
choices = ['Low', 'Medium', 'High']
# Use np.select to create a new column 'earnings_category'
df['category2'] = np.select(conditions, choices)
df.head()
