any_string = "Life is good!"
any_string[5:6]
any_string = "Life is good!"
any_string[5:7]
any_string = "Life is good!"
any_string[5:7] = "was"
print("Life\tIs\tGood!")
print(
r"Life is good!"
)
l_string = "Ohh! my life!"
u_string = l_string.upper()
u_string
"Ohh! my life!".upper()
"Ohh! my life!".upper()
"OHH! MY LIFE!".lower()
"is it lowercase".islower()
"is it lowercase".islower()
"IS IT UPPERCASE".isupper()
#example
query = "
select all_columns
from my_table"
new_query = query.replace("my_table", "new_table_name")
new_query
#example
query = "select all_columns from my_table"
new_query = query.replace("my_table", "new_table_name")
new_query
#example
query = '''
select all_columns
from my_table'''
new_query = query.replace("my_table", "new_table_name")
new_query
#example
query = r'''
select all_columns
from my_table'''
new_query = query.replace("my_table", "new_table_name")
new_query
#example
query = '''
select all_columns
from my_table'''
new_query = query.replace("my_table", "new_table_name")
print(new_query)
my_txt = "life is good!"
for i in my_txt:
print(i)
my_txt = "life is good!"
for i in my_txt:
print(i)
my_txt = "life is good!"
for i in my_txt:
print(i)
my_txt = "life is good!"
for i in my_txt:
print(i)
my_txt = "life is good!"
for i in my_txt:
print(i)
my_txt = "life is good!"
for i in 1:len(my_txt):
print(i)
my_txt = "life is good!"
for i in 1:len(my_txt):
print(i)
my_txt = "life is good!"
for i in 0:len(my_txt):
print(i)
my_txt = "life is good!"
for i in range(my_txt):
print(i)
my_txt = "life is good!"
for i in range(len(my_txt)):
print(i)
my_txt = "life is good!"
for i in range(len(my_txt)):
print(i)
my_txt = "life is good!"
for i in range(len(my_txt)):
print(i)
my_txt = "life is good!"
print("good" in my_text)
my_txt = "life is good!"
print("good" in my_txt)
"s".capitalize()
"star".capitalize()
if "good" in my_txt:
print(my_txt)
my_txt = "life is good!"
print("good" in my_txt)
if "good" in my_txt:
print(my_txt)
if "good" in my_txt:
print(my_txt)
if "good" in my_txt:
print(my_txt)
if "bad" not in my_txt:
print("bad is not in the text")
if "bad" not in my_txt:
print("bad is not in the text")
if "bad" not in my_txt:
print("'bad' is not in the text")
if "bad" not in my_txt:
print("'bad' is not in the text")
raw_text = "   my text   "
print(raw_text.strip())
raw_text = "   my text   "
print(raw_text.strip())
raw_text = "   my text   "
raw_text.strip()
raw_text = "   my text   "
raw_text.strip()
raw_text = "banana, apple, cherry"
raw_text.split(",")
raw_text = "banana, apple, cherry"
raw_text.split(",").strip()
raw_text = "banana, apple, cherry"
raw_text.split(",")
raw_text = "banana, apple, cherry"
alist = raw_text.split(",")
alist
alist[1]
alist[1].strip()
a_tuple = (1, 2.5, "string", [3, 4])
a_tuple
1_tuple = (1, 2, 3)
2_tuple = ("a", "ab")
1_tuple + 2_tuple
1_tuple = (1, 2, 3)
2_tuple = ("a", "ab")
1_tuple + 2_tuple
1_tuple = (1, 2, 3)
2_tuple = ("a", "ab")
1_tuple + 2_tuple
a_tuple = (1, 2, 3)
b_tuple = ("a", "ab")
a_tuple + b_tuple
a_tuple[:2]
len(a_tuple)
a_tuple = (1, 2.5, "string", [3, 4])
a_tuple
a_tuple = (1, 2.5, "string", [3, 4])
a_tuple
b_tuple = ("a", "ab")
a_tuple + b_tuple
b_tuple = ("a", "ab")
a_tuple + b_tuple
a_tuple[:2]
len(a_tuple)
a_tuple = (1,2,3,4,5)
a_tuple[5] = "a"
a_tuple = (1,2,3,4,5)
a_tuple[5] = "a"
# output: TypeError: 'tuple' object does not support item assignment
a_tuple = (1, 5, 2, 7, 4)
a_tuple.sort()
a_tuple = (1, 5, 2, 7, 4)
a_tuple.sorted()
a_tuple = (1, 5, 2, 7, 4)
sorted()
a_tuple = (1, 5, 2, 7, 4)
sorted(a_tuple)
a_tuple = (1, 5, 2, 7, 4)
type(sorted(a_tuple))
nested = (1, 2, ("a", "b", "c"), ("ayan", (4, 5)))
nested[2]
## 1. way
a_tuple = (1, 2.5, "string", [3, 4])
## 2. way -- no parenthesis
b_tuple = a, b
## 1. way
a_tuple = (1, 2.5, "string", [3, 4])
## 2. way -- no parenthesis
b_tuple = a, b
b_tuple = a, b
## 1. way
a_tuple = (1, 2.5, "string", [3, 4])
b = (1,)
b
a = ("a", "b", "c", "d")
a.index("b")
a = ("a", "b", "c", "d", "a", "b", "c", "d")
a.count("b")
a = ("a", "b", "c", "d", "a", "b", "c", "d")
for item in a:
print(item)
a = ("a", "b", "c", "d", "a", "b", "c", "d")
for item in a:
print(item)
reticulate::repl_python()
df3.columns
reticulate::repl_python()
df3.columns
reticulate::repl_python()
print(df3.keys())
print(df3.keys())
print(df3.keys())
reticulate::repl_python()
