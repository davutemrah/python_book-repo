a = [x for x in range(1, 10) if (x%3==0 or x%5==0)]
sum(a)==23
b = [x for x in range(1, 1000) if (x%3==0 or x%5==0)]
print(sum(b))
fib_list = [1, 2]
while True:
x = fib_list[-1] + fib_list[-2]
if x > 4000000:
break
fib_list.append(x)
even_sum = [x for x in fib_list if x%2==0]
sum(even_sum)
int(1⁄2)
int(0.5)
int(1⁄2)
print(int(1⁄2))
def gcd(a, b):
while b != 0:
a, b = b, a % b
return a
# Example usage:
print(gcd(48, 60))  # Output: 12
def gcd(a, b):
while b != 0:
a, b = b, a % b
return a
# Example usage:
print(gcd(50, 60))  # Output: 12
def gcd(a, b):
while b != 0:
a, b = b, a % b
return a
# Example usage:
print(gcd(55, 60))  # Output: 12
data = {
'department': ['Sales', 'Sales', 'HR', 'HR', 'IT', 'IT', 'Finance', 'Finance'],
'employee': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace', 'Hannah'],
'salary': [70000, 80000, 50000, 60000, 90000, 85000, 95000, 65000],
}
df = pd.DataFrame(data)
# Group by 'department' and calculate sum of 'salary' with transform
df['total_salary'] = df.groupby('department')['salary'].transform('sum')
print(df)
import pandas as pd
data = {
'NAME': ['David', 'Alice', 'Charlie',  'Bob',],
'AGE': [25, 30,  40, 35],
'SALARY': [50000, 600000, 55000, 700000]
}
df = pd.DataFrame(data)
df
# Sort by 'age' in ascending order (DEFAULT)
sorted_df = df.sort_values(by='NAME')
print(sorted_df)
# Sort by 'age' in ascending order, then by 'salary' in descending order
sorted_df = df.sort_values(by=['AGE', 'SALARY'], ascending=[True, False])
print(sorted_df)
data = {
'NAME': ['Alice', 'Bob', 'Charlie', 'David'],
'AGE': [25, 30, None, 40]
}
df = pd.DataFrame(data)
# Sort by 'age' and place NaN values at the start
sorted_df = df.sort_values(by='AGE', na_position='first')
print(sorted_df)
import pandas as pd
data = {
'department': ['Sales', 'Sales', 'HR', 'HR', 'IT', 'IT', 'Finance', 'Finance'],
'employee': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace', 'Hannah'],
'salary': [70000, 80000, 50000, 60000, 90000, 85000, 75000, 65000],
'bonus': [5000, 7000, 4000, 6000, 9000, 8500, 7500, 6500]
}
df_company = pd.DataFrame(data)
df_company
# Group by 'department' and calculate the mean salary
grouped_df = df_company.groupby('department')['salary'].mean()
print(grouped_df)
print(type(grouped_df))
# Convert the resulting Series into a DataFrame
grouped_df = grouped_df.reset_index()
# Rename the column for clarity
grouped_df.columns = ['department', 'average_salary']
grouped_df
# Group by 'department' and 'employee', and calculate total compensation
df_company['total_compensation'] = df_company['salary'] + df_company['bonus']
grouped_df = df_company.groupby(['department', 'employee'])['total_compensation'].sum()
print(grouped_df)
print(type(grouped_df))
# Group by 'department' and calculate sum and mean of 'salary' and 'bonus'
agg_df = df_company.groupby('department').agg({ 'salary': ['sum', 'mean'],
'bonus': ['sum', 'mean']
})
print(agg_df)
print(type(agg_df))
agg_df = df_company.groupby('department').agg(
total_salary = pd.NamedAgg(column='salary', aggfunc='sum'),
avg_salary = pd.NamedAgg(column='salary', aggfunc='mean'),
total_bonus = pd.NamedAgg(column='bonus', aggfunc='sum'),
avg_bonus = pd.NamedAgg(column='bonus', aggfunc='mean')
)
print(agg_df)
agg_df = df_company.groupby('department').agg({
'salary': 'sum', 'bonus': 'sum'
}).rename(columns={
'salary': 'total_salary',
'bonus': 'total_bonus'
})
agg_df['avg_salary'] = df_company.groupby('department')['salary'].mean()
agg_df['avg_bonus'] = df_company.groupby('department')['bonus'].mean()
print(agg_df)
data = {
'department': ['Sales', 'Sales', 'HR', 'HR', 'IT', 'IT', 'Finance', 'Finance'],
'employee': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace', 'Hannah'],
'salary': [70000, 80000, 50000, 60000, 90000, 85000, 95000, 65000],
}
df = pd.DataFrame(data)
# Group by 'department' and calculate sum of 'salary' with transform
df['total_salary'] = df.groupby('department')['salary'].transform('sum')
print(df)
df.filter(lambda x: x['salary']>80000)
df.filter( x['salary']>80000)
df.filter(df['salary']>80000)
df[df['salary']>80000]
B = [0] * len(A)
B
B = [0] * 5
[0] * 5
x = np.array(1, 2, 3, 4, 5)
def my_func():
return 2*x
x.apply(my_func)
x
x = np.array(1, 2, 3, 4, 5)
def my_func():
return 2*x
x.apply(my_func)
x = np.array(1, 2, 3, 4, 5)
def my_func():
return 2*x
x.apply(my_func)
x = np.array([1, 2, 3, 4, 5])
def my_func():
return 2*x
x.apply(my_func)
x = np.array([1, 2, 3, 4, 5])
def my_func():
return 2*x
my_func(x)
x = np.array([1, 2, 3, 4, 5])
def my_func(x):
return 2*x
my_func(x)
import numpy as np
x = np.array([1, 2, 3, 4, 5])
def my_func(x):
return 2*x
my_func(x)
import numpy as np
print(np.__version__)
x = np.array([0, 1, 2, 3, 4])
type(x)
np.array( (1, 2, 3, 4) )
x = np.array( [1, 2, 3, 4] )
print("type of the object --->", type(x))
print("type of values in object --->", x.dtype)
print("size of the array --->", x.size)
print("dimension of the object --->", x.ndim )
print("size and dimension --->", x.shape)
arr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
# Get elements from index 2 to 5 (exclusive)
print(arr[2:5])  # Output: [2, 3, 4]
# Get every other element starting from index 1
print(arr[1::2])  # Output: [1, 3, 5, 7]
# Get all elements in reverse order
print(arr[::-1])  # Output: [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
arr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
# Get elements from index 2 to 5 (exclusive)
print(arr[2:5])  # Output: [2, 3, 4]
# Get every other element starting from index 1
print(arr[1::2])  # Output: [1, 3, 5, 7]
# Get all elements in reverse order
print(arr[::-2])  # Output: [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
arr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
# Get elements from index 2 to 5 (exclusive)
print(arr[2:5])  # Output: [2, 3, 4]
# Get every other element starting from index 1
print(arr[1::2])  # Output: [1, 3, 5, 7]
# Get all elements in reverse order
print(arr[::-])  # Output: [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
arr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
# Get elements from index 2 to 5 (exclusive)
print(arr[2:5])  # Output: [2, 3, 4]
# Get every other element starting from index 1
print(arr[1::2])  # Output: [1, 3, 5, 7]
# Get all elements in reverse order
print(arr[::-1])  # Output: [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
arr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
# Get elements from index 2 to 5 (exclusive)
print(arr[2:5:1])  # Output: [2, 3, 4]
# Get every other element starting from index 1
print(arr[1::2])  # Output: [1, 3, 5, 7]
# Get all elements in reverse order
print(arr[::-1])  # Output: [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
a = np.array([1, 2, 3])
b = np.array([4, 5, 6])
print(a + b)  # Output: [5, 7, 9]
print(a - b)  # Output: [-3, -3, -3]
print(a * b)  # Output: [ 4, 10, 18]
print(a / b)  # Output: [0.25, 0.4, 0.5 ]
print(a ** b)  # Output: [  1, 32, 729]
print(np.add(a, b))
print(np.subtract(a, b))
print(np.multiply(a, b))
print(np.divide(a, b))
print(np.power(a, b))
a = np.array([1, 2, 3, 4, 5])
sum(a)
a = np.array([1, 2, 3, 4, 5])
mean(a)
def my_func(x):
return 2 * x
a = np.array([1, 2, 3, 4, 5])
my_func(a)
a = np.array([1, 2, 3, 4, 5])
print(a.sum())  # Output: 15
print(a.std())  # Output: 1.58113883046
a = np.array([1, 2, 3, 4, 5])
print(np.sum(a))  # Output: 15
print(np.mean(a))  # Output: 3.0
print(np.median(a))  # Output: 3.0
print(np.std(a))  # Output: 1.58113883046
a = np.array([1, 2, 3, 4, 5])
print(a.sum())  # Output: 15
print(sum(a))
print(a.std())
print(std(a))
a = np.array([1, 2, 3, 4, 5])
print(a.sum())  # Output: 15
print(sum(a))
print(a.std())
a = np.array([1, 2, 3, 4, 5])
# Define the function
def my_func(x):
return 2 * x
my_func(a)
a = np.array([1, 2, 3, 4, 5])
# Define the function
def my_func(x):
return 2 * x**2 + 5*x +2
my_func(a)
a = np.array([1, 2, 3, 4, 5])
# Define the function
def my_func(x):
return -2 * x**2 + 5*x +2
my_func(a)
a = np.array([1, 2, 3, 4, 5])
# Define the function
def my_func(x):
return -2 * x**2 + -5*x +2
my_func(a)
a = np.array([1, 2, 3, 4, 5])
# Define the function
def my_func(x):
return -2 * x**2 + -5*x - 20
my_func(a)
a = np.array([1, 2, 3, 4, 5])
# Define the function
def my_func(x):
return -2*x**2 + 5*x + 20
my_func(a)
a = np.array([[1, 2], [3, 4]])
b = np.array([[5, 6], [7, 8]])
print(a @ b)  # Output: [[19 22], [43 50]]
print(np.dot(a, b))  # Output: [[19 22], [43 50]]
print(a.dot(b))  # Output: [[19 22], [43 50]]
import pandas as pd
# Create a Pandas Series
data = [10, 20, 30, 40, 50]
series = pd.Series(data)
# Display the Series
print(series)
import pandas as pd
data = pd.Series([1, 2, 3, 4, 5])
data_list = list(data)
print(type(data_list))
import pandas as pd
data = pd.Series([1, 2, 3, 4, 5])
# Convert series to python list
data_list = list(data)
data_list = data.to_list()
print(type(data_list))
serias_a = pd.series([2, 4, 6, 8, 10])
series_b = pd.series([1, 3, 5, 7, 9])
# addition
print(serias_a + series_b)
# subtraction
print(series_a - series_b)
# multiplication
print(series_a * series_b)
# division
print(series_a / series_b)
import pandas as pd
import numpy as np
import pandas as pd
# Create a Pandas Series
data = [10, 20, 30, 40, 50]
series = pd.Series(data)
# Display the Series
print(series)
import pandas as pd
data = pd.Series([1, 2, 3, 4, 5])
# Convert series to python list
data_list = list(data)    ### general solution
data_list = data.to_list() ### pandas optimized
print(type(data_list))
serias_a = pd.series([2, 4, 6, 8, 10])
series_b = pd.series([1, 3, 5, 7, 9])
# addition
print(serias_a + series_b)
# subtraction
print(series_a - series_b)
# multiplication
print(series_a * series_b)
# division
print(series_a / series_b)
serias_a = pd.Series([2, 4, 6, 8, 10])
series_b = pd.Series([1, 3, 5, 7, 9])
# addition
print(serias_a + series_b)
# subtraction
print(series_a - series_b)
# multiplication
print(series_a * series_b)
# division
print(series_a / series_b)
serias_a = pd.Series([2, 4, 6, 8, 10])
serias_b = pd.Series([1, 3, 5, 7, 9])
# addition
print(serias_a + serias_b)
# subtraction
print(serias_a - serias_b)
# multiplication
print(serias_a * serias_b)
# division
print(serias_a / serias_b)
serias_a = pd.Series([2, 4, 6, 8, 10])
serias_b = pd.Series([1, 3, 5, 7, 9])
# addition
print('addition', serias_a + serias_b)
# subtraction
print(serias_a - serias_b)
# multiplication
print(serias_a * serias_b)
# division
print(serias_a / serias_b)
serias_a = pd.Series([2, 4, 6, 8, 10])
serias_b = pd.Series([1, 3, 5, 7, 9])
# addition
print('addition \n', serias_a + serias_b)
# subtraction
print(serias_a - serias_b)
# multiplication
print(serias_a * serias_b)
# division
print(serias_a / serias_b)
serias_a = pd.Series([2, 4, 6, 8, 10])
serias_b = pd.Series([1, 3, 5, 7, 9])
# addition
print('addition\n', serias_a + serias_b)
# subtraction
print(serias_a - serias_b)
# multiplication
print(serias_a * serias_b)
# division
print(serias_a / serias_b)
serias_a = pd.Series([2, 4, 6, 8, 10])
serias_b = pd.Series([1, 3, 5, 7, 9])
# addition
print('addition\n', serias_a + serias_b)
# subtraction
print('subtraction\n', serias_a - serias_b)
# multiplication
print(serias_a * serias_b)
# division
print(serias_a / serias_b)
serias_a = pd.Series([2, 4, 6, 8, 10])
serias_b = pd.Series([1, 3, 5, 7, 9])
# addition
print('addition\n', serias_a + serias_b)
# subtraction
print('\nsubtraction\n', serias_a - serias_b)
# multiplication
print(serias_a * serias_b)
# division
print(serias_a / serias_b)
serias_a = pd.Series([2, 4, 6, 8, 10])
serias_b = pd.Series([1, 3, 5, 7, 9])
# addition
print('addition\n', serias_a + serias_b)
# subtraction
print('\nsubtraction\n', serias_a - serias_b)
# multiplication
print('\nmultiplication\n', serias_a * serias_b)
# division
print('\ndivision\n', serias_a / serias_b)
serias_a = pd.Serias([2, 4, 6, 8, 10])
serias_b = pd.Series([1, 3, 5, 7, 10])
serias_a > serias_b
serias_a = pd.Series([2, 4, 6, 8, 10])
serias_b = pd.Series([1, 3, 5, 7, 10])
serias_a > serias_b
serias_a = pd.Series([2, 4, 6, 8, 10])
serias_b = pd.Series([1, 3, 5, 7, 10])
serias_a == serias_b
serias_a > serias_b
serias_a < serias_b
serias_a =! serias_b
serias_a = pd.Series([2, 4, 6, 8, 10])
serias_b = pd.Series([1, 3, 5, 7, 10])
serias_a == serias_b
serias_a > serias_b
serias_a < serias_b
serias_a != serias_b
dict_a = {"cola": [1, 2, 3, 4, 5]}
pd.Series(dict_a['col_a'])
dict_a = {"cola": [1, 2, 3, 4, 5]}
pd.Series(dict_a['cola'])
dict_a = {"a": [1], "b": [2], "c":[3]}
pd.Series(dict_a)
dict_a = {"a": 1, "b": 2, "c":3}
pd.Series(dict_a)
dict_a = {"cola": [1, 2, 3]}
pd.Series(dict_a['cola'])
dict_a = {"a": [1, 5], "b": 2, "c":3}
pd.Series(dict_a)
dict_a = {"a": 1, "b": 2, "c":3}
pd.Series(dict_a)
# Create a NumPy array
arr = np.array([3, 1, 4, 1, 5, 9, 2])
# Sort the array
np.sort(arr)
arr.sort()
# Create a NumPy array
arr = np.array([3, 1, 4, 1, 5, 9, 2])
# Sort the array
np.sort(arr).     # need to assign to a variable to save
# Create a NumPy array
arr = np.array([3, 1, 4, 1, 5, 9, 2])
# Sort the array
np.sort(arr)     # need to assign to a variable to save
import pandas as pd
# Create a Pandas Series
series = pd.Series([3, 1, 4, 1, 5, 9, 2])
# Sort the Series by values
sorted_series = series.sort_values()
# Display the sorted Series
print("Sorted Series:\n", sorted_series)
series.sort()
def countPossibleTriangles(sides):
count = 0
for i in range(len(sides)):
for j in range(i+1, len(sides)):
for k in range(j+1, len(sides)):
potentialSides = [sides[i], sides[j], sides[k]]
side3 = max(potentialSides) if sum(potentialSides) - side3 > side3:
count += 1
def countPossibleTriangles(sides):
count = 0
for i in range(len(sides)):
for j in range(i+1, len(sides)):
for k in range(j+1, len(sides)):
potentialSides = [sides[i], sides[j], sides[k]]
side3 = max(potentialSides) if sum(potentialSides) - side3 > side3: count += 1
