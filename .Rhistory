df_csv.index
import pandas as pd
pd.set_option('display.max_columns', None)
## empty data frame
df1 = pd.DataFrame()
df1
df2 = pd.DataFrame({'A' : []})
df2
df2.empty
my_dict = {'Col_1': [1,2,3,4],
'Col_2': ['a', 'b', 'c', 'd'],
'Col_3': 1984}
my_df = pd.DataFrame(my_dict)
my_df[:5]
a_list = [1,2,3,4]
b_list = ['a', 'b', 'c', 'd']
##
df3 = pd.DataFrame({'var1': a_list,
'var2': b_list})
df3
df_csv = pd.read_csv('data/college.csv').iloc[:100, :5]
df_csv[:5]
df_csv.shape
print("number of rows:", df_csv.shape[0],
"\nnumber of columns:", df_csv.shape[1])
df_csv.columns
for cols in df_csv.columns:
print(cols)
[cols.upper() for cols in df_csv.columns]
df_csv.dtypes
[types for types in df_csv.dtypes]
df_csv.index
df_csv.index[:5]
df_csv.index
for i in df_csv.index:
print(i)
for i in df_csv.index:
if i < 5:
print(i)
df_csv[:5]
# Select a single row and column
df.loc[1, 'name']
# Select a single row and column
df_csv.loc[1, 'name']
# Select multiple rows and columns
df.loc[[0, 2, 4], ['name', 'state']]
# Select multiple rows and columns
df_csv.loc[[0, 2, 4], ['name', 'state']]
# Select rows from 'row_label_start' to 'row_label_end'
df_csv.loc[0:4]
# Select rows from 'row_label_start' to 'row_label_end'
df_csv.loc[0:4,]
df_csv.loc[0:4, ]
df_csv.loc[0:4, :]
# Select rows where a condition is True
df_csv.loc[df_csv['id'] < 101000]
import pandas as pd
pd.set_option('display.max_columns', None)
## empty data frame
df1 = pd.DataFrame()
df1
df2 = pd.DataFrame({'A' : []})
df2
df2.empty
my_dict = {'Col_1': [1,2,3,4],
'Col_2': ['a', 'b', 'c', 'd'],
'Col_3': 1984}
my_df = pd.DataFrame(my_dict)
my_df[:5]
a_list = [1,2,3,4]
b_list = ['a', 'b', 'c', 'd']
##
df3 = pd.DataFrame({'var1': a_list,
'var2': b_list})
df3
df_csv = pd.read_csv('data/college.csv').iloc[:100, :5]
df_csv[:5]
df_csv.shape
print("number of rows:", df_csv.shape[0],
"\nnumber of columns:", df_csv.shape[1])
df_csv.columns
list(df3.columns)
list(df_csv.columns)
[df_csv.columns]
df_csv.columns.to_list()
df = df_csv.copy()
new_col_names = ['ID', 'NAME', 'CITY', 'STATE', 'REGION']
df.columns = new_col_names
df.columns.to_list()
df = df_csv.copy()
df.rename(columns={'id': 'NEW_ID'}, inplace=True)
df = df_csv.copy()
df.rename(columns={'id': 'NEW_ID'}, inplace=True)
df[:5]
df = df_csv.copy()
df.rename(columns={'id': 'NEW_ID'}, inplace=True)
df.columns.to_list()
df.columns = {'MY_NAME': 'name', 'MY_STATE': 'state'}
df.columns.to_list()
df = df_csv[['name', 'state']].copy()
df.columns = {'MY_NAME': 'name', 'MY_STATE': 'state'}
df.columns.to_list()
df = df_csv[['name', 'state']].copy()
df.columns = ['MY_NAME', 'MY_STATE']
df.columns.to_list()
df = df_csv[['name', 'state', 'id']].copy()
df.columns = {'MY_NAME': 'name', 'MY_STATE': 'state'}
df.columns.to_list()
df = df_csv[['name', 'state', 'id']].copy()
df.columns = {'MY_NAME': 'name', 'MY_STATE': 'state', 'id':'id'}
df.columns.to_list()
df = df_csv[['name', 'state']].copy()
df.columns = ['MY_NAME', 'MY_STATE']
df.columns.to_list()
df = df_csv.copy()
df.columns = [x.upper() for x in df.columns]
df.columns.to_list()
import pandas as pd
pd.set_option('display.max_columns', None)
## empty data frame
df1 = pd.DataFrame()
df1
df2 = pd.DataFrame({'A' : []})
df2
df2.empty
my_dict = {'Col_1': [1,2,3,4],
'Col_2': ['a', 'b', 'c', 'd'],
'Col_3': 1984}
my_df = pd.DataFrame(my_dict)
my_df[:5]
a_list = [1,2,3,4]
b_list = ['a', 'b', 'c', 'd']
##
df3 = pd.DataFrame({'var1': a_list,
'var2': b_list})
df3
df_csv = pd.read_csv('data/college.csv').iloc[:100, :5]
df_csv[:5]
df_csv.shape
print("number of rows:", df_csv.shape[0],
"\nnumber of columns:", df_csv.shape[1])
df_csv.columns
list(df_csv.columns)
df_csv.columns.to_list()
for cols in df_csv.columns:
print(cols)
df_csv.dtypes
[types for types in df_csv.dtypes]
df_csv[:5]
df_csv.index
for i in df_csv.index:
if i < 5:
print(i)
for ixRow, row in df_csv[:5].iterrows():
print(ixRow, row)
for ixRow, row in df_csv[:5].iterrows():
print(ixRow)
for ixRow, row in df_csv[:5].iterrows():
print(row)
for ixRow, row in df_csv[:5].iterrows():
print(row.id)
for ixRow, row in df_csv[:5].iterrows():
print(row)
df_csv[:5]
import pandas as pd
pd.set_option('display.max_columns', None)
## empty data frame
df1 = pd.DataFrame()
df1
df2 = pd.DataFrame({'A' : []})
df2
df2.empty
my_dict = {'Col_1': [1,2,3,4],
'Col_2': ['a', 'b', 'c', 'd'],
'Col_3': 1984}
my_df = pd.DataFrame(my_dict)
my_df[:5]
a_list = [1,2,3,4]
b_list = ['a', 'b', 'c', 'd']
##
df3 = pd.DataFrame({'var1': a_list,
'var2': b_list})
df3
df_csv = pd.read_csv('data/college.csv').iloc[:100, :5]
df_csv[:5]
df_csv.shape
print("number of rows:", df_csv.shape[0],
"\nnumber of columns:", df_csv.shape[1])
df_csv.columns
list(df_csv.columns)
df_csv.columns.to_list()
for cols in df_csv.columns:
print(cols)
df_csv.dtypes
[types for types in df_csv.dtypes]
df_csv[:5]
df_csv.index
for i in df_csv.index:
if i < 5:
print(i)
df = df_csv.copy()
df.index = df.state
df[:5]
df = df_csv.copy()
df['index_column'] = df.index
df[:5]
df = df_csv.copy()
# Select rows where the 'column_name' equals a specific value
df[df['name'] == 'Auburn University']
df[df.name == 'Auburn University']
# Select rows where 'column1' equals 'value1' and 'column2' equals 'value2'
subset = df[(df.city == 'Birmingham') & (df.name.contains('Alabama'))]
# Select rows where 'column1' equals 'value1' and 'column2' equals 'value2'
subset = df[(df.city == 'Birmingham') & (df.name.contain('Alabama'))]
# Select rows where 'column1' equals 'value1' and 'column2' equals 'value2'
subset = df[(df.city == 'Birmingham') & (df.name like ('Alabama'))]
# Select rows where 'column1' equals 'value1' and 'column2' equals 'value2'
df[(df.city == 'Birmingham') & (df.state == 'AL')]
x = df_csv.iloc[0:5, 1:3]
x
df_csv
x = df_csv.iloc[0:5, 1:3]
x
df_csv
df3.keys()
df_csv.keys()
list(df_csv.columns.values)
list(df3.columns.values.tolist())
list(df_csv.columns.values.tolist())
import pandas as pd
pd.set_option('display.max_columns', None)
## empty data frame
df1 = pd.DataFrame()
df1
df2 = pd.DataFrame({'A' : []})
df2
df = df_csv.copy()
df.rename(columns={'id': 'NEW_ID'}, inplace=True)
df.columns.to_list()
df = df_csv[['name', 'state', 'id']].copy()
df.columns = {'MY_NAME': 'name', 'MY_STATE': 'state', 'id':'id'}
df.columns.to_list()
df = df_csv[['name', 'state']].copy()
df.columns = ['MY_NAME', 'MY_STATE']
df.columns.to_list()
df = pd.DataFrame(data, columns=['column1', 'column2', 'column3'])
df = df_csv.copy()
df.columns = [x.upper() for x in df.columns]
df.columns.to_list()
df = pd.DataFrame({'A?la': [1,2,3,4],
'PYTHON': ['a', 'a', 'a', 'a'],
'col 3': ['1','1','b','b']})
df
df.rename(columns = {'PYTHON':'Python'}, inplace = False)
### list column names
list(df)
new_names = ['new_name1', 'new_name2','new_name3']
df.columns = new_names
list(df)
### set problematic names
problem_names = ['VAR1$$$', 'var2','Var3###']
df.columns = problem_names
### removing bad characters
df.columns = df.columns.str.replace('$', '', regex = True)
df.columns = df.columns.str.replace('#', '', regex = True)
list(df)
### set problematic names
problem_names = ['VAR  $1', 'var #2','Var ? 3 ']
df.columns = problem_names
## Column names: remove white spaces and convert to lower case
df.columns= df.columns.str.strip()
## Column names: convert to lower case
df.columns = df.columns.str.lower()
## Column names: convert to lower case
df = df.rename(columns = str.lower)
## removing bad characters
df.columns = df.columns.str.replace('$', '', regex = True)
df.columns = df.columns.str.replace('#', '', regex = True)
df.columns = df.columns.str.replace('?', '', regex = True)
df.columns = df.columns.str.replace(' ', '', regex = True)
list(df)
## Column names: convert to upper case
df.columns = df.columns.str.upper()
list(df)
selected_cols = ['id', 'name', 'city']
df_csv[selected_cols]
# Select a single row and column
df_csv.loc[1, 'name']
# Select multiple rows and columns
df_csv.loc[[0, 2, 4], ['name', 'state']]
# Select rows from 'row_label_start' to 'row_label_end'
df_csv.loc[0:4]
## all same
# df_csv.loc[0:4, ]
# df_csv.loc[0:4, :]
# Select rows where a condition is True
df_csv.loc[df_csv['id'] < 101000]
df = df_csv.copy()
# Set a value for a specific row and column
df.loc[10, 'name'] = 'My University'
df = df_csv.copy()
# Select rows where the 'column_name' equals a specific value
df[df['name'] == 'Auburn University']
df[df.name == 'Auburn University']
# Select rows where 'column1' equals 'value1' and 'column2' equals 'value2'
df[(df.city == 'Birmingham') & (df.state == 'AL')]
subset = df.loc['row_label1':'row_label5', 'column_labelA':'column_labelB']
subset = df.iloc[0:5, 1:3]  # Select rows 0 to 4 and columns 1 to 2
copy_df = df.copy()
